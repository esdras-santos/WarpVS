"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CairoASTMapping = void 0;
const solc_typed_ast_1 = require("solc-typed-ast");
const cairoNodes_1 = require("../ast/cairoNodes");
const writers_1 = require("./writers");
const CairoASTMapping = (ast, throwOnUnimplemented) => new Map([
    [solc_typed_ast_1.ArrayTypeName, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Assignment, new writers_1.AssignmentWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.BinaryOperation, new writers_1.BinaryOperationWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Block, new writers_1.BlockWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Break, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [cairoNodes_1.CairoAssert, new writers_1.CairoAssertWriter(ast, throwOnUnimplemented)],
    [cairoNodes_1.CairoContract, new writers_1.CairoContractWriter(ast, throwOnUnimplemented)],
    [cairoNodes_1.CairoFunctionDefinition, new writers_1.CairoFunctionDefinitionWriter(ast, throwOnUnimplemented)],
    [
        cairoNodes_1.CairoGeneratedFunctionDefinition,
        new writers_1.CairoGeneratedFunctionDefinitionWriter(ast, throwOnUnimplemented),
    ],
    [
        cairoNodes_1.CairoImportFunctionDefinition,
        new writers_1.CairoImportFunctionDefinitionWriter(ast, throwOnUnimplemented),
    ],
    [cairoNodes_1.CairoTempVarStatement, new writers_1.CairoTempVarWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Conditional, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Continue, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.DoWhileStatement, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ElementaryTypeName, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [
        solc_typed_ast_1.ElementaryTypeNameExpression,
        new writers_1.ElementaryTypeNameExpressionWriter(ast, throwOnUnimplemented),
    ],
    [solc_typed_ast_1.EmitStatement, new writers_1.EmitStatementWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.EnumDefinition, new writers_1.EnumDefinitionWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.EnumValue, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ErrorDefinition, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.EventDefinition, new writers_1.EventDefinitionWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ExpressionStatement, new writers_1.ExpressionStatementWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ForStatement, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.FunctionCall, new writers_1.FunctionCallWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.FunctionCallOptions, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.FunctionTypeName, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Identifier, new writers_1.IdentifierWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.IdentifierPath, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.IfStatement, new writers_1.IfStatementWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ImportDirective, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.IndexAccess, new writers_1.IndexAccessWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.IndexRangeAccess, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.InheritanceSpecifier, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.InlineAssembly, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Literal, new writers_1.LiteralWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Mapping, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.MemberAccess, new writers_1.MemberAccessWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ModifierDefinition, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ModifierInvocation, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.NewExpression, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.OverrideSpecifier, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.ParameterList, new writers_1.ParameterListWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.PlaceholderStatement, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Return, new writers_1.ReturnWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.RevertStatement, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.SourceUnit, new writers_1.SourceUnitWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.StructDefinition, new writers_1.StructDefinitionWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.StructuredDocumentation, new writers_1.StructuredDocumentationWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.Throw, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.TryCatchClause, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.TryStatement, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.TupleExpression, new writers_1.TupleExpressionWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.UnaryOperation, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.UncheckedBlock, new writers_1.BlockWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.UserDefinedTypeName, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.UsingForDirective, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
    [solc_typed_ast_1.VariableDeclaration, new writers_1.VariableDeclarationWriter(ast, throwOnUnimplemented)],
    [
        solc_typed_ast_1.VariableDeclarationStatement,
        new writers_1.VariableDeclarationStatementWriter(ast, throwOnUnimplemented),
    ],
    [solc_typed_ast_1.WhileStatement, new writers_1.NotImplementedWriter(ast, throwOnUnimplemented)],
]);
exports.CairoASTMapping = CairoASTMapping;
//# sourceMappingURL=index.js.map