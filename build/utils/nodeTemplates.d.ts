import { ArrayTypeName, ASTNode, Block, ContractDefinition, DataLocation, ElementaryTypeName, Expression, ExpressionStatement, FunctionDefinition, Identifier, Literal, ParameterList, Return, Statement, StructuredDocumentation, TupleExpression, TypeName, VariableDeclaration, VariableDeclarationStatement } from 'solc-typed-ast';
import { AST } from '../ast/ast';
import { CairoTempVarStatement } from '../ast/cairoNodes';
export declare function createCairoTempVar(name: string, ast: AST): CairoTempVarStatement;
export declare function createAddressTypeName(payable: boolean, ast: AST): ElementaryTypeName;
export declare function createStringTypeName(ast: AST): ElementaryTypeName;
export declare function createArrayTypeName(baseType: TypeName, ast: AST): ArrayTypeName;
export declare function createStaticArrayTypeName(baseType: TypeName, size: number, ast: AST): ArrayTypeName;
export declare function createBlock(statements: Statement[], ast: AST, documentation?: StructuredDocumentation | string): Block;
export declare function createUncheckedBlock(statements: Statement[], ast: AST, documentation?: StructuredDocumentation | string): Block;
export declare function createBoolLiteral(value: boolean, ast: AST): Literal;
export declare function createBoolTypeName(ast: AST): ElementaryTypeName;
export declare function createBytesTypeName(ast: AST): ElementaryTypeName;
declare type BytesN = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32;
export declare function createBytesNTypeName(n: BytesN, ast: AST): ElementaryTypeName;
export declare function createEmptyTuple(ast: AST): TupleExpression;
export declare function createTuple(ast: AST, nodes: Expression[]): TupleExpression;
export declare function createExpressionStatement(ast: AST, expression: Expression): ExpressionStatement;
export declare function createIdentifier(variable: VariableDeclaration, ast: AST, dataLocation?: DataLocation, lookupNode?: ASTNode): Identifier;
export declare function createNumberLiteral(value: number | bigint | string, ast: AST, typeString?: string): Literal;
export declare function createNumberTypeName(width: number, signed: boolean, ast: AST): ElementaryTypeName;
export declare function createStringLiteral(value: string, ast: AST): Literal;
export declare function createParameterList(params: Iterable<VariableDeclaration>, ast: AST, scope?: number): ParameterList;
export declare function createReturn(toReturn: Expression | VariableDeclaration[] | undefined, retParamListId: number, ast: AST, lookupNode?: ASTNode): Return;
export declare function createUint256TypeName(ast: AST): ElementaryTypeName;
export declare function createUint8TypeName(ast: AST): ElementaryTypeName;
declare type UintN = 8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72 | 80 | 88 | 96 | 104 | 112 | 120 | 128 | 136 | 144 | 152 | 160 | 168 | 176 | 184 | 192 | 200 | 208 | 216 | 224 | 232 | 240 | 248 | 256;
export declare function createUintNTypeName(n: UintN, ast: AST): ElementaryTypeName;
export declare function createDefaultConstructor(node: ContractDefinition, ast: AST): FunctionDefinition;
export declare function createVariableDeclarationStatement(varDecls: (VariableDeclaration | null)[], initialValue: Expression | undefined, ast: AST): VariableDeclarationStatement;
export {};
//# sourceMappingURL=nodeTemplates.d.ts.map