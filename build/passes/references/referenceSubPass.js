"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferenceSubPass = void 0;
const mapper_1 = require("../../ast/mapper");
/*
 A common superclass for passes utilising the data generated by the internal analyses of this pass
 Replace is particularly important, as new nodes inserted into the tree don't have analysis data
 associated by default
*/
class ReferenceSubPass extends mapper_1.ASTMapper {
    constructor(actualDataLocations, expectedDataLocations) {
        super();
        this.actualDataLocations = actualDataLocations;
        this.expectedDataLocations = expectedDataLocations;
    }
    getLocations(node) {
        return [this.actualDataLocations.get(node), this.expectedDataLocations.get(node)];
    }
    replace(oldNode, newNode, parent, actualLoc, expectedLoc, ast) {
        ast.replaceNode(oldNode, newNode, parent);
        if (actualLoc) {
            this.actualDataLocations.set(newNode, actualLoc);
        }
        if (expectedLoc) {
            this.expectedDataLocations.set(newNode, expectedLoc);
        }
    }
}
exports.ReferenceSubPass = ReferenceSubPass;
//# sourceMappingURL=referenceSubPass.js.map